// Generated by gencpp from file slam_toolbox_msgs/ResetResponse.msg
// DO NOT EDIT!


#ifndef SLAM_TOOLBOX_MSGS_MESSAGE_RESETRESPONSE_H
#define SLAM_TOOLBOX_MSGS_MESSAGE_RESETRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slam_toolbox_msgs
{
template <class ContainerAllocator>
struct ResetResponse_
{
  typedef ResetResponse_<ContainerAllocator> Type;

  ResetResponse_()
    : result(0)  {
    }
  ResetResponse_(const ContainerAllocator& _alloc)
    : result(0)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESULT_SUCCESS)
  #undef RESULT_SUCCESS
#endif

  enum {
    RESULT_SUCCESS = 0u,
  };


  typedef boost::shared_ptr< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ResetResponse_

typedef ::slam_toolbox_msgs::ResetResponse_<std::allocator<void> > ResetResponse;

typedef boost::shared_ptr< ::slam_toolbox_msgs::ResetResponse > ResetResponsePtr;
typedef boost::shared_ptr< ::slam_toolbox_msgs::ResetResponse const> ResetResponseConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator1> & lhs, const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator1> & lhs, const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace slam_toolbox_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "077d96dcedff8bde88bb113787d3fb93";
  }

  static const char* value(const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x077d96dcedff8bdeULL;
  static const uint64_t static_value2 = 0x88bb113787d3fb93ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slam_toolbox_msgs/ResetResponse";
  }

  static const char* value(const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Result code defintions\n"
"uint8 RESULT_SUCCESS=0\n"
"\n"
"uint8 result\n"
"\n"
;
  }

  static const char* value(const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::slam_toolbox_msgs::ResetResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SLAM_TOOLBOX_MSGS_MESSAGE_RESETRESPONSE_H
